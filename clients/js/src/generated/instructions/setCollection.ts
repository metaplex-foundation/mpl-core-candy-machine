/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findCandyMachineAuthorityPda } from '../../hooked';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SetCollectionInstructionAccounts = {
  /** Candy Machine account. */
  candyMachine: PublicKey | Pda;
  /** Candy Machine authority. */
  authority?: Signer;
  /**
   * Authority PDA.
   *
   */

  authorityPda?: PublicKey | Pda;
  /** Payer of the transaction. */
  payer?: Signer;
  /**
   * Update authority of the collection.
   *
   */

  collectionUpdateAuthority: PublicKey | Pda;
  /**
   * Mint account of the collection.
   *
   */

  collection: PublicKey | Pda;
  /** Update authority of the new collection NFT. */
  newCollectionUpdateAuthority: Signer;
  /**
   * New collection mint.
   *
   */

  newCollection: PublicKey | Pda;
  /**
   * Token Metadata program.
   *
   */

  mplCoreProgram?: PublicKey | Pda;
  /** System program. */
  systemProgram?: PublicKey | Pda;
  /**
   * Instructions sysvar account.
   *
   */

  sysvarInstructions?: PublicKey | Pda;
};

// Data.
export type SetCollectionInstructionData = { discriminator: Array<number> };

export type SetCollectionInstructionDataArgs = {};

export function getSetCollectionInstructionDataSerializer(): Serializer<
  SetCollectionInstructionDataArgs,
  SetCollectionInstructionData
> {
  return mapSerializer<
    SetCollectionInstructionDataArgs,
    any,
    SetCollectionInstructionData
  >(
    struct<SetCollectionInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'SetCollectionInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [192, 254, 206, 76, 168, 182, 59, 223],
    })
  ) as Serializer<
    SetCollectionInstructionDataArgs,
    SetCollectionInstructionData
  >;
}

// Instruction.
export function setCollection(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: SetCollectionInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCoreCandyMachineCore',
    'CMACYFENjoBMHzapRXyo1JZkVS6EtaDDzkjMrmQLvr4J'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    candyMachine: {
      index: 0,
      isWritable: true,
      value: input.candyMachine ?? null,
    },
    authority: { index: 1, isWritable: false, value: input.authority ?? null },
    authorityPda: {
      index: 2,
      isWritable: true,
      value: input.authorityPda ?? null,
    },
    payer: { index: 3, isWritable: true, value: input.payer ?? null },
    collectionUpdateAuthority: {
      index: 4,
      isWritable: false,
      value: input.collectionUpdateAuthority ?? null,
    },
    collection: { index: 5, isWritable: true, value: input.collection ?? null },
    newCollectionUpdateAuthority: {
      index: 6,
      isWritable: false,
      value: input.newCollectionUpdateAuthority ?? null,
    },
    newCollection: {
      index: 7,
      isWritable: true,
      value: input.newCollection ?? null,
    },
    mplCoreProgram: {
      index: 8,
      isWritable: false,
      value: input.mplCoreProgram ?? null,
    },
    systemProgram: {
      index: 9,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
    sysvarInstructions: {
      index: 10,
      isWritable: false,
      value: input.sysvarInstructions ?? null,
    },
  };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.authorityPda.value) {
    resolvedAccounts.authorityPda.value = findCandyMachineAuthorityPda(
      context,
      { candyMachine: expectPublicKey(resolvedAccounts.candyMachine.value) }
    );
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.mplCoreProgram.value) {
    resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey(
      'mplCore',
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
    );
    resolvedAccounts.mplCoreProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.sysvarInstructions.value) {
    resolvedAccounts.sysvarInstructions.value = publicKey(
      'Sysvar1nstructions1111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetCollectionInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
